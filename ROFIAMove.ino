//    Poser action playback
//      This program was generated by Project Biped Poser to playback a specific action.
//    Use it as the starting point for your projects!
//
//    Copyright (C) 2012  Jonathan Dowdall, Project Biped (www.projectbiped.com)
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include <Servo.h> 

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Constants
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const int numberOfServos             = 12;    // the number of servos
const int numberOfJoints             = 12;
const int numberOfHeadServos         = 2;
const int numberOfFramesForward      = 121;   // Frames for moving forward
const int playbackDelayForward       = 10;    // Delay between the forward walk frames to achieve a stable speed
const int numberOfFramesNeutral      = 5;     // Frames for moving to home position
const int playbackDelayNeutral       = 20;    // Delay between the nuetral frames to achieve a stable speed
const int numberOfFramesRight        = 30;    // Delay between the right turn frames to achieve a stable speed
const int playbackDelayRight         = 25;    // Delay between the right turn frames to achieve a stable speed
const int ultrasonicConstant         = 58;    // Calculation for the distance detected by the ultrasonic sensor
                                              // Speed of sound is about 340 m/s -> 29 microseconds/cm, divide
                                              // the time taken for the ultrasonic sensor to detect by 2 to get
                                              // the time taken by the pulse to reach the object, then divide by
                                              // the ultrasonic constant to get the distance in centimeters.
const int pingPin                    = 4;     // Ultrasonic sensor pin

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Action Frames
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Joints positions are in degrees * 100 (home position is 0 degrees)
/////////////////////////////////////////////
//JOINT INDEXES
//
//RIGHT LEG JOINTS
// 0 Right Ankle (roll)
// 1 Right Lower Leg 
// 2 Right Knee 
// 3 Right Middle Leg 
// 4 Right Upper Leg 
// 5 Right Hip (roll)
//LEFT LEG JOINTS
// 6 Left Ankle (roll)
// 7 Left Lower Leg 
// 8 Left Knee 
// 9 Left Middle Leg 
// 10 Left Upper Leg 
// 11 Left Hip (roll)
/////////////////////////////////////////////
int servoPins[numberOfServos] = {22, 24, 26, 28, 30, 32, 38, 40, 42, 44, 46, 48};  // the pin for each servo 

int framesForward[numberOfFramesForward][numberOfJoints] = {
                      { -134, -2393,     0,     0, -3100,  1400, -1100,  1200,   800,     0,     0, -2300 },
                      {  408, -2152,     0,     0, -2856,  1536, -1343,  1096,   800,     0,    91, -2300 },
                      {  952, -1911,     0,     0, -2613,  1673, -1586,   992,   800,     0,   182, -2300 },
                      { 1495, -1670,     0,     0, -2369,  1810, -1830,   889,   800,     0,   273, -2300 },
                      { 2038, -1429,     0,     0, -2126,  1947, -2073,   785,   800,     0,   365, -2300 },
                      { 2582, -1188,     0,     0, -1883,  2084, -2316,   682,   800,     0,   456, -2300 },
                      { 3125,  -947,     0,     0, -1639,  2221, -2560,   578,   800,     0,   547, -2300 },
                      { 3268,  -797,   -79,     0, -1566,  2333, -2746,   517,   945,     0,   507, -2300 },
                      { 2891,  -772,  -256,     0, -1713,  2406, -2849,   515,  1269,     0,   301, -2300 },
                      { 2514,  -748,  -433,     0, -1860,  2480, -2952,   512,  1593,     0,    94, -2300 },
                      { 2138,  -723,  -609,     0, -2008,  2554, -3055,   509,  1917,     0,  -111, -2300 },
                      { 1761,  -698,  -786,     0, -2155,  2627, -3158,   506,  2241,     0,  -317, -2300 },
                      { 1384,  -673,  -963,     0, -2302,  2701, -3261,   503,  2565,     0,  -523, -2300 },
                      { 1007,  -648, -1139,     0, -2449,  2774, -3364,   500,  2889,     0,  -729, -2300 },
                      {  916,  -954, -1251,   332, -2130,  2836, -3400,   507,  3221,   391,  -556, -2322 },
                      {  974, -1437, -1331,   844, -1561,  2893, -3400,   518,  3562,   994,  -180, -2356 },
                      { 1031, -1920, -1410,  1356,  -993,  2950, -3400,   530,  3904,  1597,   194, -2390 },
                      { 1088, -2403, -1490,  1867,  -424,  3007, -3400,   541,  4245,  2199,   569, -2424 },
                      { 1145, -2886, -1570,  2379,   143,  3064, -3400,   552,  4586,  2802,   944, -2458 },
                      { 1202, -3369, -1649,  2891,   712,  3121, -3400,   564,  4927,  3405,  1320, -2492 },
                      { 1259, -3852, -1729,  3402,  1281,  3178, -3400,   575,  5268,  4007,  1695, -2526 },
                      { 1316, -4335, -1808,  3914,  1849,  3234, -3400,   586,  5609,  4610,  2070, -2560 },
                      { 1373, -4818, -1888,  4426,  2418,  3291, -3400,   598,  5950,  5213,  2446, -2595 },
                      { 1445, -4420, -1814,  4228,  2508,  3283, -3374,   642,  5575,  4926,  2330, -2600 },
                      { 1519, -3871, -1714,  3908,  2518,  3263, -3344,   692,  5075,  4486,  2129, -2600 },
                      { 1593, -3321, -1614,  3587,  2528,  3243, -3314,   742,  4575,  4045,  1929, -2600 },
                      { 1667, -2772, -1515,  3268,  2538,  3222, -3284,   792,  4075,  3606,  1730, -2600 },
                      { 1741, -2222, -1415,  2948,  2548,  3203, -3254,   842,  3575,  3166,  1530, -2600 },
                      { 1815, -1673, -1315,  2628,  2558,  3183, -3224,   892,  3075,  2726,  1330, -2600 },
                      { 1890, -1123, -1215,  2308,  2568,  3163, -3194,   942,  2575,  2286,  1130, -2600 },
                      { 1964,  -574, -1115,  1988,  2578,  3143, -3164,   992,  2075,  1846,   930, -2600 },
                      { 2038,   -25, -1015,  1668,  2588,  3123, -3134,  1042,  1575,  1406,   730, -2600 },
                      { 2112,   524,  -915,  1348,  2598,  3103, -3104,  1092,  1075,   966,   530, -2600 },
                      { 1947,   583, -1019,  1189,  2515,  2836, -2930,   896,   932,   823,   202, -2481 },
                      { 1740,   556, -1159,  1059,  2415,  2526, -2730,   656,   852,   733,  -147, -2341 },
                      { 1534,   529, -1299,   929,  2315,  2216, -2530,   416,   772,   643,  -497, -2201 },
                      { 1327,   502, -1439,   799,  2215,  1906, -2330,   175,   692,   553,  -847, -2061 },
                      { 1120,   475, -1579,   669,  2115,  1596, -2130,   -64,   612,   463, -1197, -1921 },
                      {  913,   448, -1718,   539,  2014,  1286, -1930,  -303,   532,   373, -1547, -1781 },
                      {  706,   422, -1859,   409,  1914,   976, -1729,  -544,   451,   283, -1897, -1641 },
                      {  499,   395, -1999,   279,  1814,   666, -1530,  -784,   372,   193, -2247, -1501 },
                      {  292,   368, -2139,   149,  1714,   356, -1330, -1024,   292,   103, -2597, -1361 },
                      {   86,   341, -2279,    19,  1614,    46, -1130, -1264,   212,    13, -2947, -1221 },
                      {   47,   265, -2325,    68,  1787,    17, -1108, -1266,   302,     0, -2906, -1140 },
                      {   38,   181, -2355,   148,  2007,    37, -1118, -1226,   422,     0, -2796, -1070 },
                      {   29,    96, -2385,   227,  2227,    56, -1128, -1186,   542,     0, -2686, -1000 },
                      {   20,    12, -2415,   308,  2447,    77, -1138, -1146,   662,     0, -2576,  -930 },
                      {   12,   -71, -2445,   388,  2667,    97, -1148, -1106,   782,     0, -2466,  -860 },
                      {    3,  -155, -2475,   468,  2886,   117, -1158, -1066,   902,     0, -2356,  -790 },
                      {   -5,  -240, -2505,   548,  3107,   137, -1168, -1026,  1022,     0, -2246,  -720 },
                      {  -14,  -324, -2535,   628,  3326,   157, -1178,  -986,  1142,     0, -2136,  -650 },
                      {  -23,  -408, -2565,   708,  3547,   177, -1188,  -946,  1262,     0, -2026,  -580 },
                      {  -32,  -492, -2595,   788,  3767,   197, -1198,  -906,  1382,     0, -1916,  -510 },
                      { -214,  -402, -2252,   718,  3411,   -55, -1005, -1052,  1256,     0, -2022,  -193 },
                      { -426,  -280, -1843,   621,  2954,  -356,  -777, -1232,  1088,     0, -2167,   167 },
                      { -639,  -158, -1434,   525,  2497,  -656,  -548, -1411,   920,     0, -2311,   528 },
                      { -851,   -37, -1025,   429,  2040,  -957,  -320, -1591,   751,     0, -2455,   889 },
                      {-1064,    84,  -616,   333,  1583, -1258,   -91, -1771,   583,     0, -2599,  1249 },
                      {-1276,   205,  -207,   237,  1126, -1558,   136, -1950,   414,     0, -2744,  1610 },
                      {-1488,   327,   201,   140,   669, -1859,   365, -2130,   246,     0, -2888,  1971 },
                      {-1701,   449,   610,    44,   212, -2160,   593, -2309,    78,     0, -3032,  2332 },
                      {-1847,   462,   800,     0,    68, -2283,   885, -2360,     0,     0, -3083,  2483 },
                      {-1933,   385,   800,     0,   192, -2252,  1222, -2299,     0,     0, -3052,  2452 },
                      {-2020,   308,   800,     0,   316, -2221,  1559, -2239,     0,     0, -3021,  2421 },
                      {-2106,   230,   800,     0,   440, -2191,  1896, -2179,     0,     0, -2991,  2391 },
                      {-2193,   153,   800,     0,   564, -2160,  2234, -2119,     0,     0, -2960,  2360 },
                      {-2279,    75,   800,     0,   688, -2129,  2571, -2058,     0,     0, -2929,  2329 },
                      {-2371,    -6,   802,     0,   808, -2101,  2903, -1989,     0,     0, -2901,  2305 },
                      {-2524,  -130,   857,     0,   793, -2130,  2983, -1789,     0,     0, -2930,  2423 },
                      {-2676,  -254,   911,     0,   778, -2160,  3062, -1589,     0,     0, -2960,  2541 },
                      {-2829,  -378,   966,     0,   763, -2189,  3141, -1389,     0,     0, -2989,  2659 },
                      {-2981,  -502,  1021,     0,   748, -2219,  3221, -1189,     0,     0, -3019,  2777 },
                      {-3134,  -626,  1075,     0,   733, -2248,  3300,  -988,     0,     0, -3048,  2895 },
                      {-3287,  -750,  1130,     0,   718, -2278,  3379,  -788,     0,     0, -3078,  3012 },
                      {-3393,  -806,  1262,   139,   730, -2251,  3377,  -721,   -48,    51, -3054,  3028 },
                      {-3366,  -662,  1629,   696,   820, -2058,  3134, -1046,  -241,   255, -2872,  2744 },
                      {-3340,  -518,  1997,  1253,   910, -1865,  2891, -1372,  -434,   460, -2690,  2460 },
                      {-3313,  -375,  2364,  1810,  1000, -1671,  2647, -1697,  -628,   665, -2508,  2176 },
                      {-3287,  -231,  2731,  2368,  1090, -1478,  2404, -2022,  -821,   869, -2326,  1891 },
                      {-3260,   -87,  3098,  2925,  1180, -1285,  2161, -2347, -1014,  1074, -2144,  1607 },
                      {-3233,    56,  3465,  3482,  1270, -1091,  1918, -2672, -1208,  1279, -1962,  1323 },
                      {-3207,   200,  3833,  4039,  1360,  -898,  1675, -2997, -1401,  1483, -1780,  1038 },
                      {-3180,   344,  4200,  4596,  1451,  -705,  1432, -3323, -1594,  1688, -1598,   754 },
                      {-3163,   431,  4247,  4787,  1549,  -663,  1349, -3225, -1569,  1750, -1234,   681 },
                      {-3156,   452,  3907,  4537,  1659,  -802,  1459, -2615, -1279,  1640,  -644,   861 },
                      {-3149,   473,  3567,  4287,  1769,  -943,  1569, -2005,  -989,  1530,   -54,  1041 },
                      {-3142,   493,  3227,  4037,  1879, -1083,  1679, -1395,  -699,  1420,   535,  1221 },
                      {-3135,   514,  2886,  3787,  1989, -1223,  1789,  -785,  -409,  1310,  1125,  1401 },
                      {-3128,   535,  2547,  3537,  2099, -1363,  1899,  -175,  -119,  1200,  1715,  1581 },
                      {-3121,   555,  2207,  3287,  2209, -1503,  2009,   434,   170,  1090,  2305,  1761 },
                      {-3114,   576,  1867,  3037,  2319, -1643,  2119,  1044,   460,   980,  2895,  1941 },
                      {-3107,   597,  1527,  2787,  2429, -1782,  2229,  1654,   750,   870,  3485,  2121 },
                      {-3100,   617,  1187,  2537,  2539, -1922,  2339,  2264,  1040,   760,  4075,  2301 },
                      {-3065,   568,   919,  2319,  2401, -2063,  2364,  2555,  1091,   664,  4319,  2427 },
                      {-2995,   432,   738,  2138,  1961, -2203,  2284,  2454,   851,   583,  4139,  2487 },
                      {-2925,   296,   558,  1958,  1521, -2343,  2204,  2354,   611,   503,  3958,  2547 },
                      {-2856,   161,   378,  1778,  1081, -2483,  2123,  2254,   371,   423,  3778,  2607 },
                      {-2786,    25,   198,  1598,   641, -2623,  2043,  2154,   131,   343,  3598,  2667 },
                      {-2716,  -109,    18,  1418,   201, -2763,  1963,  2054,  -108,   263,  3418,  2727 },
                      {-2647,  -245,  -161,  1238,  -238, -2903,  1883,  1954,  -348,   183,  3238,  2787 },
                      {-2577,  -381,  -341,  1058,  -678, -3043,  1803,  1854,  -588,   103,  3058,  2847 },
                      {-2507,  -516,  -521,   878, -1118, -3183,  1723,  1754,  -828,    23,  2878,  2907 },
                      {-2438,  -652,  -701,   698, -1558, -3323,  1643,  1654, -1068,   -56,  2698,  2967 },
                      {-2346,  -734,  -701,   573, -1804, -3332,  1528,  1532, -1263,   -59,  2654,  2874 },
                      {-2226,  -752,  -481,   513, -1814, -3182,  1368,  1382, -1403,    30,  2774,  2594 },
                      {-2106,  -769,  -261,   453, -1824, -3032,  1208,  1232, -1543,   120,  2894,  2314 },
                      {-1986,  -786,   -41,   393, -1834, -2882,  1048,  1082, -1682,   210,  3014,  2034 },
                      {-1866,  -803,   179,   333, -1844, -2732,   887,   932, -1823,   300,  3134,  1754 },
                      {-1746,  -821,   399,   272, -1854, -2582,   727,   782, -1963,   390,  3254,  1473 },
                      {-1625,  -838,   619,   213, -1864, -2432,   568,   632, -2103,   480,  3374,  1193 },
                      {-1506,  -855,   839,   153, -1874, -2282,   408,   482, -2243,   570,  3494,   914 },
                      {-1386,  -873,  1059,    92, -1884, -2132,   248,   332, -2383,   660,  3614,   634 },
                      {-1266,  -890,  1279,    33, -1894, -1982,    88,   182, -2522,   750,  3734,   354 },
                      {-1142,  -980,  1324,     0, -1964, -1721,   -59,   159, -2415,   756,  3594,    64 },
                      {-1014, -1160,  1155,     0, -2109, -1324,  -191,   291, -2007,   660,  3137,  -235 },
                      { -886, -1340,   987,     0, -2253,  -927,  -324,   424, -1598,   564,  2680,  -536 },
                      { -758, -1519,   819,     0, -2397,  -530,  -456,   556, -1189,   468,  2223,  -837 },
                      { -629, -1699,   650,     0, -2542,  -133,  -588,   688,  -780,   371,  1766, -1138 },
                      { -501, -1878,   482,     0, -2686,   263,  -721,   821,  -371,   275,  1309, -1438 },
                      { -373, -2058,   313,     0, -2830,   660,  -853,   953,    37,   179,   852, -1739 },
                      { -245, -2238,   145,     0, -2975,  1056,  -985,  1085,   446,    83,   395, -2040 }
};

int framesNeutral[numberOfFramesNeutral][numberOfJoints] = {
                      { -245, -2238,   145,     0, -2975,  1056,  -985,  1085,   446,    83,   395,  -2040 },
                      { -184, -1679,   109,     0, -2231,   792,  -739,   814,   335,    62,   296,  -1530 },
                      { -123, -1119,    73,     0, -1488,   528,  -493,   543,   223,    42,   198,  -1020 },
                      {  -61,  -560,    36,     0,  -744,   264,  -246,   271,   112,    21,    99,   -510 },
                      {    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,      0 }
};

int framesRight[numberOfFramesRight][numberOfJoints] = {
                      {    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 },
                      { -323,  -148,  -320,  -180,   400,  -340,   340,     0,     0,     0,   200,   240 },
                      { -646,  -296,  -640,  -360,   800,  -680,   680,     0,     0,     0,   400,   480 },
                      { -970,  -444,  -960,  -540,  1200, -1019,  1019,     0,     0,     0,   600,   719 },
                      {-1293,  -593, -1280,  -720,  1600, -1360,  1360,     0,     0,     0,   800,   960 },
                      {-1616,  -741, -1600,  -900,  2000, -1700,  1700,     0,     0,     0,  1000,  1200 },
                      {-2001,  -741, -1660,  -560,  1839, -1760,  1920,   -20,     0,   460,  1120,  1480 },
                      {-2385,  -741, -1720,  -219,  1680, -1820,  2140,   -40,     0,   920,  1240,  1760 },
                      {-2769,  -741, -1780,   119,  1520, -1880,  2360,   -60,     0,  1380,  1360,  2039 },
                      {-3153,  -741, -1839,   460,  1360, -1939,  2580,   -80,     0,  1840,  1480,  2320 },
                      {-3538,  -741, -1900,   800,  1200, -2000,  2800,  -100,     0,  2300,  1600,  2600 },
                      {-3538,  -741, -1900,   800,  1200, -1900,  2800,  -100,     0,  2300,  1600,  2600 },
                      {-3538,  -741, -1900,   800,  1200, -1800,  2800,  -100,     0,  2300,  1600,  2600 },
                      {-3538,  -741, -1900,   800,  1200, -1700,  2800,  -100,     0,  2300,  1600,  2600 },
                      {-3538,  -741, -1900,   800,  1200, -1600,  2800,  -100,     0,  2300,  1600,  2600 },
                      {-3538,  -741, -1900,   800,  1200, -1500,  2800,  -100,     0,  2300,  1600,  2600 },
                      {-3403,  -573, -1880,   480,  1140, -1720,  2520,   580,   220,  1760,  1900,  2420 },
                      {-3268,  -404, -1860,   159,  1080, -1939,  2240,  1260,   440,  1220,  2200,  2240 },
                      {-3133,  -235, -1839,  -159,  1019, -2160,  1960,  1939,   660,   680,  2500,  2060 },
                      {-2998,   -67, -1820,  -480,   960, -2380,  1679,  2620,   880,   139,  2800,  1880 },
                      {-2864,   101, -1800,  -800,   900, -2600,  1400,  3300,  1100,  -400,  3100,  1700 },
                      {-2708,  -215, -1800,  -640,   800, -2600,  1340,  3379,  1100,  -400,  3020,  1700 },
                      {-2553,  -532, -1800,  -480,   700, -2600,  1280,  3460,  1100,  -400,  2940,  1700 },
                      {-2398,  -849, -1800,  -320,   600, -2600,  1220,  3540,  1100,  -400,  2860,  1700 },
                      {-2243, -1166, -1800,  -159,   500, -2600,  1160,  3620,  1100,  -400,  2780,  1700 },
                      {-2088, -1483, -1800,     0,   400, -2600,  1100,  3700,  1100,  -400,  2700,  1700 },
                      {-1671, -1186, -1440,     0,   320, -2080,   880,  2960,   880,  -320,  2160,  1360 },
                      {-1253,  -889, -1080,     0,   240, -1560,   660,  2220,   660,  -240,  1620,  1019 },
                      { -835,  -593,  -720,     0,   160, -1040,   440,  1480,   440,  -160,  1080,   680 },
                      { -417,  -296,  -359,     0,    79,  -519,   219,   739,   219,   -79,   539,   339 }
};

int servoCalibrations[numberOfJoints][3] = {
                      {2279, 2063, 1500}, 
                      {858, 238, 439}, 
                      {-500, -1100, -1400}, 
                      {0, 0, -100}, 
                      {-600, -700, -800}, 
                      {-1000, -1200, -1500}, 
                      {2200, 1700, 1500}, 
                      {-300, 0, -570}, 
                      {500, 200, -218}, 
                      {200, 300, 244}, 
                      {1100, 1000, 253}, 
                      {1200, 700, 200}
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Variables
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Servo servos[numberOfServos];  // create servo object to control a servo 
//Servo scanServo;               // Head servo for scanning
//Servo tiltServo;               // Head servo for tilting

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void setup()
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  //wait for a second to begin (keeps the communication line open in case a new program is being downloaded)
  delay(1000);    
  
  //start up the communication
  Serial.begin(9600);  
  
  //initialize the servos
  initializeServos();
  
  // Apply the servo calibrations to the joint positions.
  ApplyCalibration();
  
  // Default position for tilt servo
//  tiltServo.write(150);
//  scanServo.write(96);
  
  PlayFrames(numberOfFramesNeutral, playbackDelayNeutral);
  delay(1000);
  
  // Delay to give the user time to set the robot down after the legs straighten out
  delay(2000);
  
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void loop()
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  
  // Distance detected by the ultrasonic sensor
  unsigned long cm = DetectDistance(pingPin);
  delay(50);

  // The robot will walk forward, but will turn right if there is an obstacle 30 cm or less in front of it
  if(cm >= 43)                  
    PlayFrames(numberOfFramesForward, playbackDelayForward);
  else
  {
    PlayFrames(numberOfFramesNeutral, playbackDelayNeutral);
    for (int i = 0; i < 4; i++) 
      PlayFrames(numberOfFramesRight, playbackDelayRight);                  
  }
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
long DetectDistance(int pingPin)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  // The PING))) is triggered by a HIGH pulse of 2 or more microseconds.
  // Give a short LOW pulse beforehand to ensure a clean HIGH pulse:
  pinMode(pingPin, OUTPUT);
  digitalWrite(pingPin, LOW);
  delayMicroseconds(2);
  digitalWrite(pingPin, HIGH);
  delayMicroseconds(5);
  digitalWrite(pingPin, LOW);

  // The same pin is used to read the signal from the PING))): a HIGH
  // pulse whose duration is the time (in microseconds) from the sending
  // of the ping to the reception of its echo off of an object.
  pinMode(pingPin, INPUT);
  long duration = pulseIn(pingPin, HIGH);

  // convert the time into a distance
  long cm = duration / ultrasonicConstant;
  return cm;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void PlayFrames(int numberOfFrames, int playbackDelay)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  // Angle value of the servo
  int value;
  // This for loop determines the animation frame the robot is playing through
  for (int framesRowNumber = 0; framesRowNumber < numberOfFrames; framesRowNumber++)
  {
    // This for loop adjusts the position of each servo
    for (int servo = 0; servo < numberOfServos; servo++)
    {   
//        scanServo.write(78); // Keeps head scan in one position while walking
      
        // each servo position is sent as a 2 byte value (high byte, low byte) integer (from -32,768 to 32,767)
        // this number is encoding the angle of the servo. The number is 100 * the servo angle.  This allows for the
        // storage of 2 significant digits(i.e. the value can be from -60.00 to 60.00 and every value in between).
        // Also remember that the servos have a range of 120 degrees. The angle is written in positions
        // which range from a minimum of 800 (-60 degrees) and go to a maximum of 2200 (60 degrees)
        
        // This branch determines whether or not the robot is walking forward or turning left based on
        // the parameters passed in the main loop    
        if (numberOfFrames == numberOfFramesForward)      value = framesForward[framesRowNumber][servo];
        else if (numberOfFrames == numberOfFramesNeutral) value = framesNeutral[framesRowNumber][servo];
        else if (numberOfFrames == numberOfFramesRight)   value = framesRight[framesRowNumber][servo];
        
        // flip for the left leg.
        if(servo >= numberOfServos/2) value = map(value, -6000,6000,6000,-6000);
        
        // tell servo to go to position in variable 'pos'
        servos[servo].write(map(value, -6000,6000,800,2200));   
        // This delay controls the delay between each servo being updated       
        delay(2);
    }
  // This delay controls the delay between each frame
  // This will vary based on the animation and may need to be changed if you make your own
  // animation with a different speed.
  delay(playbackDelay);
  }
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ApplyCalibration()
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{   
  // Apply the servo calibrations to each frame of the animation.
  // This is done before hand to keep from slowing down the playback.
  // The frames could also be stored with the calibrations already
  // applied, however leaving the calibration seperate allows other
  // ROFIs to use this same action with their own calibration.
  
  for(int f = 0; f < numberOfFramesForward; f++)
    for(int s = 0; s < numberOfServos; s++)    
      framesForward[f][s] = CorrectJointAngle(framesForward[f][s], s);
      
  for(int f = 0; f < numberOfFramesNeutral; f++)
    for(int s = 0; s < numberOfServos; s++)    
      framesNeutral[f][s] = CorrectJointAngle(framesNeutral[f][s], s);
      
  for(int f = 0; f < numberOfFramesRight; f++)
    for(int s = 0; s < numberOfServos; s++)    
      framesRight[f][s] = CorrectJointAngle(framesRight[f][s], s);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
double CorrectJointAngle(double inputAngle, int servo)
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  // The input angle is what the angle should be.
  // The corrected angle is the angle that has to be sent to the servo to achieve the input angle.
  if (inputAngle > 0)
    // Do a two point calibration between the middle and high corrected values.
    return map(inputAngle, 0, 4500, 0 + servoCalibrations[servo][1], 4500 + servoCalibrations[servo][2]);
  else
    // Do a two point calibration between the low and middle corrected values.
    return map(inputAngle, -4500, 0, -4500 + servoCalibrations[servo][0], 0 + servoCalibrations[servo][1]);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void initializeServos()
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{   
  // Assign the correct pin to each servo.
  for(int s = 0; s < numberOfServos; s++)
    servos[s].attach(servoPins[s]);
  
//  scanServo.attach(34);
//  tiltServo.attach(36);
}
