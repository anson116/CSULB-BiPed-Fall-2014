

//    Poser action playback
//      This program was generated by Project Biped Poser to playback a specific action.
//    Use it as the starting point for your projects!
//
//    Copyright (C) 2012  Jonathan Dowdall, Project Biped (www.projectbiped.com)
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include <Servo.h> 

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Constants
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const int maximumServoShieldPosition = 2200;   // the maximum pulse duration for the servo shield (2ms pulse)
const int minimumServoShieldPosition = 800;   // the minimum pulse duration for the servo shield (1ms pulse)
const int numberOfServos             = 12;      // the number of servos
const int numberOfJoints             = 12;
const int numberOfFrames             = 39;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //  The Action class collects information necessary to perform a sequence of movements.     
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  
  
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //Members
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  public:
    int             duration;      // Total duration of the action in milliseconds
    float           playbackTime;  // The playback time in milliseconds.
    unsigned long   lastTime;      // The playback time in milliseconds.
    int*            frames;        // Pointer to a two dimensional array containing the individual frames
    float           playbackSpeed; // The speed at which the action is played back (1 is realtime, 0.5 is half speed, 2.0 is twice realtime)

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //Methods
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Action(int setDuration, void* setFrames)
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  {
    frames            = (int*)setFrames;
    duration          = setDuration;
    playbackTime      = 0;
    playbackSpeed     = 1.0;
    lastTime          = 0;
  }  
  
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  void Update()
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  {  
     // Get the current time.
     unsigned long currentTime = millis(); 
   
     // Update the playback time.
     playbackTime += (playbackSpeed * (float)(currentTime - lastTime));
     
     // Loop if the playback time is past the end of the action.
     if(playbackTime > duration)
       playbackTime = playbackTime - duration;
     
     // Remember the time.
     lastTime = currentTime;     
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  void GetCurrentFrame(int* frame)
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  {
      //update each servo
      int* sourceFrame = frames + ((int)playbackTime/20)*numberOfJoints;
      for (int joint = 0; joint < numberOfJoints; joint++)
        frame[joint] = sourceFrame[joint];    
  }

};
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Action Frames
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Joints positions are in degrees * 100 (home position is 0 degrees)
/////////////////////////////////////////////
//JOINT INDEXES
//
//RIGHT LEG JOINTS
// 0 Right Ankle (roll)
// 1 Right Lower Leg 
// 2 Right Knee 
// 3 Right Middle Leg 
// 4 Right Upper Leg 
// 5 Right Hip (roll)
//LEFT LEG JOINTS
// 6 Left Ankle (roll)
// 7 Left Lower Leg 
// 8 Left Knee 
// 9 Left Middle Leg 
// 10 Left Upper Leg 
// 11 Left Hip (roll)
/////////////////////////////////////////////
int servoPins[numberOfServos] = {22, 24, 26, 28, 30, 32, 38, 40, 42, 44, 46, 48};  // the pin for each servo 
int frames[numberOfFrames][numberOfJoints] = {
                      {  707, -2393,     0,     0, -3100,  1800, -1800,     0,   800,     0,     0, -2300 },
                      { 1990, -2130,     0,     0, -3100,  2664, -2578,     0,   800,     0,     0, -2300 },
                      { 2497, -2234, -2771,  2867,  1248,  2847, -2604,     0,   800,     0,  -573, -1917 },
                      { 2812, -2367, -5772,  5915,  5980,  2894, -2500,     0,   784,     0, -1190, -1507 },
                      { 2618, -2109, -5499,  5068,  5789,  2839, -2500,     0,   634,     0, -1094, -1581 },
                      { 2425, -1852, -5226,  4222,  5598,  2785, -2500,     0,   484,     0,  -999, -1655 },
                      { 2232, -1594, -4953,  3376,  5407,  2730, -2500,     0,   334,     0,  -903, -1729 },
                      { 2039, -1336, -4680,  2529,  5216,  2676, -2500,     0,   184,     0,  -808, -1803 },
                      { 1845, -1078, -4407,  1683,  5025,  2621, -2500,     0,    34,     0,  -712, -1877 },
                      { 1652,  -821, -4134,   836,  4834,  2566, -2500,     0,  -116,     0,  -617, -1951 },
                      { 1459,  -563, -3861,    -9,  4642,  2512, -2500,     0,  -266,     0,  -521, -2026 },
                      { 1370, -1976, -2600,     0,  1551,  2064, -2574,     0,  1400,     0, -4043, -1589 },
                      { 1113,  -472, -2600,     0,  4383,  1381, -2074,     0,  1400,     0, -1100, -1396 },
                      {  462,  -482, -2620,     0,  4047,  1008, -1567,     0,  1416,     0, -1115, -1316 },
                      { -188,  -493, -2640,     0,  3711,   635, -1060,     0,  1431,     0, -1129, -1237 },
                      { -839,  -503, -2659,     0,  3375,   262,  -553,     0,  1446,     0, -1143, -1158 },
                      {-1118,  -402, -1955,     0,  2643,  -308,  -231,  -488,  1153,     0, -1545,  -544 },
                      {-1324,  -280, -1123,     0,  1845,  -909,    52, -1063,   805,     0, -2014,   163 },
                      {-1530,  -159,  -291,     0,  1047, -1510,   335, -1638,   457,     0, -2483,   871 },
                      {-1735,   -37,   539,     0,   249, -2112,   619, -2213,   108,     0, -2953,  1578 },
                      {-2306,     0,   800,     0,     0, -2300,  1541, -2222,     0,     0, -3100,  2362 },
                      {-2643,     0,   800,     0,  -337, -2075,  2371, -2175, -1630,  1686,  -542,  2828 },
                      {-2531,     0,   800,     0, -1011, -1625,  2731, -2345, -4891,  5059,  4573,  2884 },
                      {-2500,     0,   687,     0, -1128, -1555,  2686, -2199, -5595,  5365,  5856,  2859 },
                      {-2500,     0,   537,     0, -1032, -1629,  2493, -1942, -5322,  4518,  5665,  2804 },
                      {-2500,     0,   387,     0,  -937, -1703,  2299, -1684, -5049,  3672,  5474,  2749 },
                      {-2500,     0,   236,     0,  -841, -1777,  2106, -1426, -4776,  2825,  5283,  2695 },
                      {-2500,     0,    86,     0,  -746, -1851,  1913, -1169, -4503,  1979,  5092,  2640 },
                      {-2500,     0,   -63,     0,  -650, -1926,  1720,  -911, -4229,  1132,  4900,  2585 },
                      {-2500,     0,  -213,     0,  -554, -2000,  1526,  -653, -3956,   286,  4709,  2531 },
                      {-2555,     0,   635,     0, -2536, -1798,  1397, -1359, -3139,   -89,  2838,  2279 },
                      {-2246,     0,  1400,     0, -2011, -1458,  1215,  -937, -2600,     0,  3518,  1605 },
                      {-1745,     0,  1410,     0, -1110, -1344,   690,  -479, -2613,     0,  4164,  1138 },
                      {-1237,     0,  1426,     0, -1124, -1265,    39,  -489, -2633,     0,  3828,   765 },
                      { -730,     0,  1441,     0, -1138, -1186,  -611,  -500, -2652,     0,  3492,   392 },
                      { -330,  -287,  1275,     0, -1380,  -792, -1046,  -444, -2246,     0,  2922,   -98 },
                      {  -46,  -862,   927,     0, -1850,   -84, -1252,  -323, -1415,     0,  2124,  -699 },
                      {  236, -1437,   578,     0, -2319,   623, -1458,  -201,  -583,     0,  1326, -1300 },
                      {  520, -2012,   230,     0, -2788,  1331, -1663,   -80,   248,     0,   528, -1901 }
};


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Actions
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Action myAction(numberOfFrames * 20 , frames); //the action
Action* currentAction;                //pointer to the current action

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Variables
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Servo servos[numberOfServos];  // create servo object to control a servo 

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void setup()
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  //set the initial action
  currentAction = &myAction;
  
  //wait for a second to begin (keeps the communication line open in case a new program is being downloaded)
  delay(1000);    
  
  //start up the communication
  Serial.begin(9600);  
  
  //initialize the servos
  initializeServos();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void loop()
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  //this is the main update loop for the microcontroller
  
  //update the current action
  UpdateAction();
  
  //get the frame from the current action  
  int frame[numberOfServos];
  currentAction->GetCurrentFrame(frame);
  
  //set the servo positions for this frame number
  SetServoPositions(frame);        
  
  // Add a little delay.
  delay(2);                  
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void UpdateAction()
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  //check to see if the robot is walking
  if(currentAction == &myAction)
  {
    // TODO (you) : add some logic for your action here!
    
    // move to the next frame of the action
    currentAction->Update();    
  }  
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void initializeServos()
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{   
  // Assign the correct pin to each servo.
  for(int s = 0; s < numberOfServos; s++)
    servos[s].attach(servoPins[s]);  
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void SetServoPositions(int* frame)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  //update each servo
  for (int servo = 0; servo < numberOfServos; servo++)
  {   
      // each servo position is sent as a 2 byte value (high byte, low byte) integer (from -32,768 to 32,767)
      // this number is encoding the angle of the servo. The number is 100 * the servo angle.  This allows for the
      // storage of 2 significant digits(i.e. the value can be from -60.00 to 60.00 and every value in between).
      // Also remember that the servos have a range of 120 degrees. The angle is written in positions
      // which range from a minimum of 800 (-60 degrees) and go to a maximum of 2200 (60 degrees)
          
      int value = frame[servo];      
      
      // flip for the left leg.
      if(servo >= numberOfServos/2)
        value = map(value, -6000,6000,6000,-6000);
      
      servos[servo].write(map(value, -6000,6000,800,2200));              // tell servo to go to position in variable 'pos'       

  }
}
